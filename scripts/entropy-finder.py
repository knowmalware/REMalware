#!/usr/bin/env python3

import math
import argparse
import sys
import pefile
import entropy


DEFAULT_READSIZE=65536


def read_by_window(fh, size, step=1):
    # return sliding window of size SIZE, sliding by STEP each iteration
    i = file_offset = 0
    if size*2 > DEFAULT_READSIZE:
        readsize = size*2
    else:
        readsize = DEFAULT_READSIZE
    buf = fh.read(readsize)
    # while there is enough data
    while len(buf) > i+size:
        # return the current window
        yield file_offset, buf[i:i+size]
        i += step
        # if we need more data
        if len(buf) <= i+size:
            # get it
            buf = buf[i:] + fh.read(readsize)
            # reset buffer index
            i = 0
        # keep track of file offset
        file_offset += step


def entropy2(buf):
    # calculate counts
    n_counts = 256
    counts = [0]*n_counts
    for c in buf:
        counts[c] += 1
    # calculate entropy
    e = 0
    for i in range(n_counts):
        if counts[i] == 0:
            continue
        p = counts[i] / len(buf)
        e += p * math.log(p, 2)
    # return entropy
    return -1 * e


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--length', '-l', type=int, required=True)
    parser.add_argument('--threshold', '-t', type=float, required=True)
    parser.add_argument('--verbose', '-v', default=0, action='count')
    parser.add_argument('files', metavar='FILE', nargs='+')
    args = parser.parse_args()

    if args.length < 4:
        print('ERROR: length must be at least 4', file=sys.stderr)
        sys.exit(1)

    if args.threshold <= 0:
        print('ERROR: threshould must be greater than 0', file=sys.stderr)
        sys.exit(2)

    if args.verbose > 0:
        print('File: offset_or_rva == entropy')
        print('==============================')
    for f in args.files:
        pe = None
        try:
            pe = pefile.PE(f)
        except:
            pass
        with open(f, 'rb') as fh:
            for offset, w in read_by_window(fh, args.length):
                if pe:
                    offset = pe.get_rva_from_offset(offset)
                # byte-oriented entropy
                e = entropy.shannon_entropy(w) * 8
                # in case we don't have the 'entropy' module
                #e = entropy2(w)
                if args.verbose > 1:
                    print('DEBUG: {}, {}, {}'.format(len(w), offset, e), file=sys.stderr)
                if e > args.threshold:
                    print('{}: {} == {}'.format(f, offset, e))

