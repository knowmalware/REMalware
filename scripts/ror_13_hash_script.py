#!/usr/bin/env python

from pprint import pprint
import sys, pefile

def ROR(x, n, bits = 32):
    mask = (2L**n) - 1
    mask_bits = x & mask
    return (x >> n) | (mask_bits << (bits - n))


def ROL(x, n, bits = 32):
    return ROR(x, bits - n, bits)

def ror_hash( name, n ):
    result = 0
    for c in name:
        result = ROR( result, n, 32 )
        result += ord( c )
    return result

def ror_13_hash( name ):
    return ror_hash( name, 13 )

def get_api_hash_lookup( dll_name, hash_func ):
    # Create a PE instance, parsing the library file
    dll = pefile.PE( dll_name )
    lookup = {}
    # Loop through the DLL's exports
    for e in dll.DIRECTORY_ENTRY_EXPORT.symbols:
        # Calculate the function name's hash
        api_hash = hash_func( e.name )
        lookup[ api_hash ] = e.name
    return lookup

def main( dll_name ):
    # Generate a function name/ hash lookup table using the common ROR 13 hash method
    dll_lookup = get_api_hash_lookup( dll_name, ror_13_hash )
    for api in sorted( dll_lookup.keys() ):
        print "%08x" % api, ": ", dll_lookup[ api ]

if __name__ == '__main__':
    # Receive a DLL name from command-line
    if len( sys.argv ) > 1:
        dll_name = sys.argv[1]
    else:
        dll_name = 'c:\windows\system32\kernel32.dll'
    main( dll_name )
